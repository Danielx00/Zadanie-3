{"version":3,"sources":["components/Quote.js","App.js","reportWebVitals.js","index.js"],"names":["Quote","quote","getQuote","setQuote","prev","setPrev","useState","isClicked","setIsClicked","getRandomQuote","className","author","onClick","App","a","axios","get","then","res","data","randomIndex","Math","floor","random","length","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4OAmDeA,EAjDD,SAAC,GAAgD,IAA9CC,EAA6C,EAA7CA,MAAOC,EAAsC,EAAtCA,SAASC,EAA6B,EAA7BA,SAAUC,EAAmB,EAAnBA,KAAMC,EAAa,EAAbA,QAE/C,EAAkCC,oBAAS,GAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KAMMC,EAAiB,WACrBJ,EAAQJ,GACRC,IACAM,GAAa,IAEf,OACED,EACE,mCACA,sBAAKG,UAAU,QAAf,UACE,4BAAIN,EAAKH,MAAQG,EAAKH,MAAQ,KAC9B,mBAAGS,UAAU,SAAb,SAAuBN,EAAKO,OAASP,EAAKO,OAAS,KACnD,qBAAKD,UAAU,eAAf,SACE,wBAAQE,QAASH,EAAgBC,UAAU,MAA3C,8BAQJ,mCACA,sBAAKA,UAAU,QAAf,UACE,4BAAIT,GAASA,EAAMA,QACnB,mBAAGS,UAAU,SAAb,mBAA0BT,EAAMU,OAC/BV,EAAMU,OAAS,MAChB,sBAAKD,UAAU,eAAf,UACE,wBAAQE,QAASH,EAAgBC,UAAU,MAA3C,uBAGCN,GAAQ,wBAAQQ,QAjCJ,WACnBJ,GAAa,GACbL,EAASC,IA+BqCM,UAAU,MAAzC,iCCPJG,MAzBf,WACE,MAA0BP,mBAAS,CACjCL,MAAO,GACPU,OAAO,KAFT,mBAAOV,EAAP,KAAcE,EAAd,KAIA,EAAwBG,mBAAS,IAAjC,mBAAOF,EAAP,KAAaC,EAAb,KAEMH,EAAQ,uCAAG,sBAAAY,EAAA,sEACTC,IAAMC,IAVd,0IAUuBC,MAAK,SAACC,GACzB,IAAMC,EAAOD,EAAIC,KACXC,EAAcC,KAAKC,MAAMD,KAAKE,SAAWJ,EAAKK,QACpDrB,EAAS,CACPF,MAAOkB,EAAKC,GAAanB,MACzBU,OAAQQ,EAAKC,GAAaT,YANf,2CAAH,qDAWd,OACE,qBAAKD,UAAU,MAAf,SACE,cAAC,EAAD,CAAON,KAAMA,EAAMC,QAASA,EAASF,SAAUA,EAAUF,MAAOA,EAAOC,SAAUA,OCfxEuB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBV,MAAK,YAAkD,IAA/CW,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.2ac3bd7d.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport \"../App.css\";\r\nconst Quote = ({ quote, getQuote,setQuote, prev, setPrev}) => {\r\n\r\n  const [isClicked, setIsClicked] = useState(false)\r\n\r\n  const getPrevQuote = () => {\r\n    setIsClicked(true);\r\n    setQuote(prev)    \r\n  }\r\n  const getRandomQuote = () => {\r\n    setPrev(quote)\r\n    getQuote();\r\n    setIsClicked(false);\r\n  }\r\n  return (\r\n    isClicked ? (  \r\n      <>\r\n      <div className=\"quote\">\r\n        <p>{prev.quote ? prev.quote : ''}</p>\r\n        <p className=\"author\">{prev.author ? prev.author : \"\"}</p>\r\n        <div className=\"btnContainer\">\r\n          <button onClick={getRandomQuote} className=\"btn\">\r\n            Get Quote\r\n          </button>  \r\n        </div>\r\n      </div>\r\n    </>\r\n\r\n    ) : (\r\n      <>\r\n      <div className=\"quote\">\r\n        <p>{quote && quote.quote}</p>\r\n        <p className=\"author\">{`${quote.author ?\r\n         quote.author : \"\"}`}</p>\r\n        <div className=\"btnContainer\">\r\n          <button onClick={getRandomQuote} className=\"btn\">\r\n            Get Quote\r\n          </button>\r\n          {prev && <button onClick={getPrevQuote} className=\"btn\">\r\n            Prev Quote\r\n          </button>}\r\n        </div>\r\n      </div>\r\n    </>\r\n    )\r\n  )\r\n\r\n  \r\n};\r\n\r\nexport default Quote;\r\n","import { useState } from \"react\";\nimport \"./App.css\";\nimport axios from \"axios\";\nimport Quote from \"./components/Quote\";\nconst API =\n  \"https://gist.githubusercontent.com/natebass/b0a548425a73bdf8ea5c618149fe1fce/raw/f4231cd5961f026264bb6bb3a6c41671b044f1f4/quotes.json?\";\n\nfunction App() {\n  const [quote, setQuote] = useState({\n    quote: '',\n    author:''\n  });\n  const [prev, setPrev] = useState({});\n\n  const getQuote = async() => {\n    await axios.get(API).then((res) => {\n      const data = res.data;\n      const randomIndex = Math.floor(Math.random() * data.length);\n      setQuote({\n        quote: data[randomIndex].quote,\n        author: data[randomIndex].author\n      });\n    });\n  };\n\n  return (\n    <div className=\"App\">\n      <Quote prev={prev} setPrev={setPrev} setQuote={setQuote} quote={quote} getQuote={getQuote} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}